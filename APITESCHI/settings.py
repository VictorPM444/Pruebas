"""
Django settings for APITESCHI project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

#adios
# This file must be used with "source bin/activate" *from bash*
# you cannot run it directly
import sys

# Agrega la ruta de tu proyecto al PYTHONPATH
sys.path.append('APITESCHI')

# Ahora puedes importar el módulo 'api' desde tu proyecto
import api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n1)ta0hb97d*q8elenwz_#bkn#++t3hc^&v!umbcbrd^rp%3c('
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# https://docs.djangoproject.com/en/3.0/ref/settings/#allowed-hosts
ALLOWED_HOSTS = []

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    'api',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#ROOT_URLCONF = 'APITESCHI.APITESCHI.urls'
ROOT_URLCONF = 'APITESCHI.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#WSGI_APPLICATION = 'APITESCHI.APITESCHI.wsgi.application'
WSGI_APPLICATION = 'APITESCHI.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


#BD con sqlite
""" DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} """

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'vicshop',
        'USER': 'postgres',
        'PASSWORD': '12345',
        'HOST': 'localhost',  # Puedes cambiarlo según tu configuración
        'PORT': '5432',       # El puerto por defecto de PostgreSQL
    }
}


#BD con postgres render
""" DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'vicshop',
        'USER': 'victor',
        'PASSWORD': 'TubH6REU5Dg1QlY3GoLTOCWoUHmzmcu3',
        'HOST': 'oregon-postgres.render.com',  # Puede variar según tu configuración.  No perder: oregon-postgres.render.com
        'PORT': '5432',           # Puede variar según tu configuración.
    }
} """


# Usar Google Cloud Storage para almacenar archivos estáticos.
STATIC_URL = 'https://storage.googleapis.com/proyectooscar/static/'

# Usar Google Cloud Storage para almacenar archivos de medios.
#DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
#GS_BUCKET_NAME = 'proyectooscar'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# settings.py

# Asegúrate de que la configuración de PASSWORD_HASHERS contenga un hasher seguro
# Django incluye uno seguro llamado Argon2PasswordHasher por defecto
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',  # Usar Argon2 (recomendado)
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',  # Usar PBKDF2

    # Otros hashers seguros pueden ir aquí si es necesario
]

# Resto de la configuración de Django
# ...


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


#########Correccion para el uso de render############## SIN COMENTAR SIRVE IMAGENES LOCALES
STATIC_URL = 'api/static/'

# Following settings only make sense on production and may break development environments.
if not DEBUG:
    # Tell Django to copy statics to the `staticfiles` directory
    # in your application directory on Render.
    #STATIC_ROOT = os.path.join(BASE_DIR, 'api/static')

    # Turn on WhiteNoise storage backend that takes care of compressing static files
    # and creating unique names for each version so they can safely be cached forever.
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Utiliza el modelo de usuario predeterminado
    'myapp.backends.EmailBackend',  # Utiliza un backend personalizado para autenticación por correo electrónico
)

AUTH_USER_MODEL = 'api.Usuario'  # Reemplaza 'miapp' con el nombre de tu aplicación



# para correos
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'vipermxm@gmail.com'
EMAIL_HOST_PASSWORD = 'edlb afsh eybj arch'

# settings.py
MERCADO_PAGO_PUBLIC_KEY = 'TEST-249201b0-82e6-42a0-a4df-2fd8656c8dd6'
MERCADO_PAGO_ACCESS_TOKEN = 'TEST-209630761238066-111222-13ed7dfb56b2fa402ab89f84135609c0-790756007'


# settings.py
STRIPE_PUBLIC_KEY = 'pk_test_51OBjTRLZhvMA8N2WR4lQDo5RmklSYiUpvvpy8P62JVDk5slhjsVog0KeDq9mxQE8pIh8BkBgpDPVlv7hYbsEfHLP00PC5nPfAa'
STRIPE_SECRET_KEY = 'sk_test_51OBjTRLZhvMA8N2WdibAtWSygtw0q4NBpHvglLzcHJ4iIL0As9pgpJuX8WjBjjefeyQw9D8I7n2Yr9uXC2UoEA4S00rsaF7GP1'

# Usar almacenamiento local para archivos de medios.
DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'api', 'static', 'img')



